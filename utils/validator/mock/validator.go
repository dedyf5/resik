// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	lang "github.com/dedyf5/resik/ctx/lang"
	response "github.com/dedyf5/resik/pkg/response"
	gomock "github.com/golang/mock/gomock"
)

// MockIValidate is a mock of IValidate interface.
type MockIValidate struct {
	ctrl     *gomock.Controller
	recorder *MockIValidateMockRecorder
}

// MockIValidateMockRecorder is the mock recorder for MockIValidate.
type MockIValidateMockRecorder struct {
	mock *MockIValidate
}

// NewMockIValidate creates a new mock instance.
func NewMockIValidate(ctrl *gomock.Controller) *MockIValidate {
	mock := &MockIValidate{ctrl: ctrl}
	mock.recorder = &MockIValidateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIValidate) EXPECT() *MockIValidateMockRecorder {
	return m.recorder
}

// ErrorFormatter mocks base method.
func (m *MockIValidate) ErrorFormatter(err error, lang *lang.Lang) *response.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorFormatter", err, lang)
	ret0, _ := ret[0].(*response.Status)
	return ret0
}

// ErrorFormatter indicates an expected call of ErrorFormatter.
func (mr *MockIValidateMockRecorder) ErrorFormatter(err, lang interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorFormatter", reflect.TypeOf((*MockIValidate)(nil).ErrorFormatter), err, lang)
}

// Struct mocks base method.
func (m *MockIValidate) Struct(payloadStruct interface{}, lang *lang.Lang) *response.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", payloadStruct, lang)
	ret0, _ := ret[0].(*response.Status)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockIValidateMockRecorder) Struct(payloadStruct, lang interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockIValidate)(nil).Struct), payloadStruct, lang)
}
