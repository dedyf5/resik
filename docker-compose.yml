# ============================================================================
# SERVICES: Defines the containers to be run
# ============================================================================
services:

  # --- Golang Application Service (REST Mode) ---
  # This is a container instance running the resik binary in REST mode.
  resik-rest:
    # Instructions to build the Docker Image from the Dockerfile in the current directory (.).
    # Use 'image: your_registry/resik:latest' if you push the Image to a registry.
    build: .
    # Tags the built Image.
    image: resik:latest
    # Assigns a specific name to the container (makes identification easier).
    container_name: resik_rest_container
    # Connects this container to the custom network.
    networks:
      - app-network
    # Publishes the REST port from the container to the host.
    ports:
      - "${REST_APP_PORT}:${REST_APP_PORT}" # HOST_PORT:CONTAINER_PORT

    # --- Application Configuration (Hybrid: Env Var + Secrets) ---

    # 1. Load Standard (Non-Sensitive) Configuration from the .env file
    env_file:
      - .env # This file must be in the project root

    # 2. Set Environment Variables Pointing to Secret File Paths
    #    These variables are only relevant inside containers using Docker Secrets.
    #    The variable names here MUST MATCH what the Golang code (config.go) looks for.
    environment:
      # Secret path for Database (following REST consistent naming)
      DATABASE_USERNAME_PATH_FILE: /run/secrets/database_username # /run/secrets/ + secret name
      DATABASE_PASSWORD_PATH_FILE: /run/secrets/database_password # /run/secrets/ + secret name
      # Secret path for Auth Signature Key (following REST consistent naming)
      AUTH_SIGNATURE_KEY_PATH_FILE: /run/secrets/auth_signature_key # /run/secrets/ + secret name
      # ... other secret path variables for REST mode ...

      # Database connection details passed directly as environment variables.
      # The Go application should read these from the container's environment.
      DATABASE_HOST: mariadb # Uses the MariaDB service name as the hostname within the Docker network.
      DATABASE_PORT: 3306

    # 3. Grant This Container Access to the Required Secrets
    #    List of secret names defined in the global 'secrets' section below.
    secrets:
      - database_username # Secret name matching global definition
      - database_password # Secret name matching global definition
      - auth_signature_key # Secret name matching global definition
      # ... other secrets needed by the REST service (matching global definition) ...

    # Defines the command to be executed by the container (arguments for ENTRYPOINT in Dockerfile).
    command: ["rest"] # <= Run the resik binary in REST mode

    # Container restart policy.
    restart: always

    # Defines service dependencies. This container requires the database to be healthy.
    depends_on:
      mariadb:
        condition: service_healthy # Waits for MariaDB to be healthy before starting.
    healthcheck:
      # Command to test the health. Uses curl to hit the /healthz endpoint.
      # Exits with 0 if healthy (HTTP 2xx), non-zero otherwise.
      test: ["CMD-SHELL", "curl -f http://localhost:${REST_APP_PORT}/healthz || exit 1"]
      interval: 15s # How often to run the check.
      timeout: 5s # How long to wait for a response.
      retries: 3 # How many consecutive failures before marking as unhealthy.
      start_period: 20s # Grace period for the container to start before checks begin.

  # --- Golang Application Service (gRPC Mode) ---
  # This is another container instance running the resik binary in gRPC mode.
  resik-grpc:
    build: . # Using the same Dockerfile
    image: resik:latest # Using the same Image
    container_name: resik_grpc_container # <--- Container name MUST be unique
    networks:
      - app-network
    # Publishes the gRPC port from the container to the host.
    ports:
      - "${GRPC_APP_PORT}:${GRPC_APP_PORT}" # HOST_PORT:CONTAINER_PORT

    # --- Application Configuration (Hybrid: Env Var + Secrets) ---

    # 1. Load Standard (Non-Sensitive) Configuration from the .env file
    env_file:
      - .env # This file must be in the project root

    # 2. Set Environment Variables Pointing to Secret File Paths
    #    Use consistent naming for gRPC mode.
    environment:
      # Secret path for Database (following GRPC consistent naming)
      DATABASE_USERNAME_PATH_FILE: /run/secrets/database_username # /run/secrets/ + secret name
      DATABASE_PASSWORD_PATH_FILE: /run/secrets/database_password # /run/secrets/ + secret name
      # Secret path for Auth Signature Key (following GRPC consistent naming)
      AUTH_SIGNATURE_KEY_PATH_FILE: /run/secrets/auth_signature_key # /run/secrets/ + secret name
      # ... other secret path variables for GRPC mode ...

      DATABASE_HOST: mariadb
      DATABASE_PORT: 3306

    # 3. Grant This Container Access to the Required Secrets
    #    List of secret names defined in the global 'secrets' section below.
    secrets:
      - database_username # Secret name matching global definition
      - database_password # Secret name matching global definition
      - auth_signature_key # Secret name matching global definition
      # ... other secrets needed by the GRPC service (matching global definition) ...


    # Defines the command to be executed by the container.
    command: ["grpc"] # <= Run the resik binary in gRPC mode

    # Container restart policy.
    restart: always

    depends_on:
      mariadb:
        condition: service_healthy # Waits for MariaDB to be healthy before starting.
    healthcheck:
      # Command to test the health. Uses grpcurl to call the HealthzGet method.
      # Exits with 0 if healthy, non-zero otherwise.
      test: ["CMD-SHELL", "grpcurl -plaintext -import-path ./ -proto app/grpc/handler/health/health.proto localhost:${GRPC_APP_PORT} health.HealthService/HealthzGet || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  # --- Database Migration Service ---
  # This container is designed to run database migrations and then exit.
  # It will be explicitly invoked by the CI/CD pipeline (e.g., 'docker compose run --rm resik-migrate migrate up').
  # The 'command' specified here is the default, but it will be overridden by the 'docker compose run' command
  # when executed in CI/CD.
  resik-migrate:
    build: . # Uses the same Dockerfile as the application.
    image: resik:latest # Uses the same application image.
    container_name: resik_migrate_container
    networks:
      - app-network
    env_file:
      - .env # This file must be in the project root
    environment:
      # Database connection details needed for the migration tool.
      DATABASE_USERNAME_PATH_FILE: /run/secrets/database_username
      DATABASE_PASSWORD_PATH_FILE: /run/secrets/database_password
      DATABASE_HOST: mariadb
      DATABASE_PORT: 3306
    secrets:
      - database_username
      - database_password
    command: ["migrate", "up"] # The command to run the migrations.
    restart: "no" # CRUCIAL: Migrations are a one-off task; the container should not restart if completed or failed.
    depends_on:
      mariadb:
        condition: service_healthy # Migrations must wait for MariaDB to be healthy.

  # --- MariaDB Database Service ---
  mariadb:
    image: mariadb:11.4 # Uses MariaDB version 11.4 LTS as requested.
    container_name: mariadb_container
    networks:
      - app-network
    ports:
      - "3307:3306" # Optional: Publishes the DB port to the host for external access (e.g., MySQL Workbench).
    environment:
      # Environment variables for MariaDB initialization.
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/database_root_password # Reads root password from Docker secret file.
      MYSQL_DATABASE: ${DATABASE_SCHEMA} # Database name to be created.
      MYSQL_USER_FILE: /run/secrets/database_username # Reads username from Docker secret file.
      MYSQL_PASSWORD_FILE: /run/secrets/database_password # Reads password from Docker secret file.
    volumes:
      # Mounts a named volume for persistent database data.
      # Data in this volume will persist even if the MariaDB container is removed.
      - db_data:/var/lib/mysql
      # Optional: Uncomment if you have SQL scripts for initial database setup.
      # These scripts will be executed by MariaDB's entrypoint when the container starts for the first time.
      # - ./init-db:/docker-entrypoint-initdb.d
    healthcheck: # Healthcheck to ensure the database is ready to accept connections.
      test: ["CMD-SHELL", "password=$$(cat /run/secrets/database_root_password) && mariadb-admin ping -h localhost -u root -p\"$$password\""]
      interval: 10s # Checks every 10 seconds.
      timeout: 5s # Times out after 5 seconds if no response.
      retries: 5 # Retries 5 times before declaring unhealthy.
      start_period: 30s # Gives the database 30 seconds to start up initially before health checks begin.
    restart: always # Always restarts the database container if it stops.
    secrets:
      - database_root_password
      - database_username
      - database_password

# ============================================================================
# NETWORKS: Defines custom networks to connect services
# ============================================================================
networks:
  # Custom network name. Containers in this network can communicate
  # using service names (e.g., 'resik-rest' can connect to 'mariadb').
  app-network:
    driver: bridge # Default driver for networks on a single host

# ============================================================================
# SECRETS: Defines secrets to be used by services
# ============================================================================
secrets:
  # Each entry here is a definition of one secret.
  # 'file:' refers to the path of the file on the HOST containing the secret content.
  # The secret name (on the left) will become the filename in /run/secrets/ inside the container.

  # Secret for the application database username (used by resik-rest & resik-grpc logic)
  # Consistent secret names per mode for explicitness
  database_username:
    file: ./.secrets/database_username.txt # Path to file on HOST

  database_password:
    file: ./.secrets/database_password.txt # Path to file on HOST

  database_root_password:
    file: ./.secrets/database_root_password.txt # Path to file on HOST

  auth_signature_key:
    file: ./.secrets/auth_signature_key.txt # Path to file on HOST

  # ... other secrets needed ...

# ============================================================================
# VOLUMES: Defines named volumes for persistent data storage.
# Data in named volumes persists even if containers are removed, providing
# data longevity for stateful services like databases.
# ============================================================================
volumes:
  db_data:
