// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: app/grpc/handler/general/general.proto

package general

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeneralServiceClient is the client API for GeneralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralServiceClient interface {
	Home(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HomeRes, error)
}

type generalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralServiceClient(cc grpc.ClientConnInterface) GeneralServiceClient {
	return &generalServiceClient{cc}
}

func (c *generalServiceClient) Home(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HomeRes, error) {
	out := new(HomeRes)
	err := c.cc.Invoke(ctx, "/general.GeneralService/Home", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralServiceServer is the server API for GeneralService service.
// All implementations must embed UnimplementedGeneralServiceServer
// for forward compatibility
type GeneralServiceServer interface {
	Home(context.Context, *emptypb.Empty) (*HomeRes, error)
	mustEmbedUnimplementedGeneralServiceServer()
}

// UnimplementedGeneralServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeneralServiceServer struct {
}

func (UnimplementedGeneralServiceServer) Home(context.Context, *emptypb.Empty) (*HomeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}
func (UnimplementedGeneralServiceServer) mustEmbedUnimplementedGeneralServiceServer() {}

// UnsafeGeneralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralServiceServer will
// result in compilation errors.
type UnsafeGeneralServiceServer interface {
	mustEmbedUnimplementedGeneralServiceServer()
}

func RegisterGeneralServiceServer(s grpc.ServiceRegistrar, srv GeneralServiceServer) {
	s.RegisterService(&GeneralService_ServiceDesc, srv)
}

func _GeneralService_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServiceServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general.GeneralService/Home",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServiceServer).Home(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneralService_ServiceDesc is the grpc.ServiceDesc for GeneralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "general.GeneralService",
	HandlerType: (*GeneralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Home",
			Handler:    _GeneralService_Home_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/grpc/handler/general/general.proto",
}
