// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: app/grpc/handler/merchant/merchant.proto

package merchant

import (
	context "context"
	status "github.com/dedyf5/resik/app/grpc/proto/status"
	request "github.com/dedyf5/resik/core/merchant/request"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantServiceClient interface {
	MerchantPost(ctx context.Context, in *request.MerchantPost, opts ...grpc.CallOption) (*MerchantUpsertRes, error)
	MerchantPut(ctx context.Context, in *request.MerchantPut, opts ...grpc.CallOption) (*MerchantUpsertRes, error)
	MerchantListGet(ctx context.Context, in *request.MerchantListGet, opts ...grpc.CallOption) (*MerchantListGetRes, error)
	MerchantDelete(ctx context.Context, in *request.MerchantDelete, opts ...grpc.CallOption) (*status.Empty, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) MerchantPost(ctx context.Context, in *request.MerchantPost, opts ...grpc.CallOption) (*MerchantUpsertRes, error) {
	out := new(MerchantUpsertRes)
	err := c.cc.Invoke(ctx, "/merchant.MerchantService/MerchantPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) MerchantPut(ctx context.Context, in *request.MerchantPut, opts ...grpc.CallOption) (*MerchantUpsertRes, error) {
	out := new(MerchantUpsertRes)
	err := c.cc.Invoke(ctx, "/merchant.MerchantService/MerchantPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) MerchantListGet(ctx context.Context, in *request.MerchantListGet, opts ...grpc.CallOption) (*MerchantListGetRes, error) {
	out := new(MerchantListGetRes)
	err := c.cc.Invoke(ctx, "/merchant.MerchantService/MerchantListGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) MerchantDelete(ctx context.Context, in *request.MerchantDelete, opts ...grpc.CallOption) (*status.Empty, error) {
	out := new(status.Empty)
	err := c.cc.Invoke(ctx, "/merchant.MerchantService/MerchantDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
// All implementations must embed UnimplementedMerchantServiceServer
// for forward compatibility
type MerchantServiceServer interface {
	MerchantPost(context.Context, *request.MerchantPost) (*MerchantUpsertRes, error)
	MerchantPut(context.Context, *request.MerchantPut) (*MerchantUpsertRes, error)
	MerchantListGet(context.Context, *request.MerchantListGet) (*MerchantListGetRes, error)
	MerchantDelete(context.Context, *request.MerchantDelete) (*status.Empty, error)
	mustEmbedUnimplementedMerchantServiceServer()
}

// UnimplementedMerchantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (UnimplementedMerchantServiceServer) MerchantPost(context.Context, *request.MerchantPost) (*MerchantUpsertRes, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MerchantPost not implemented")
}
func (UnimplementedMerchantServiceServer) MerchantPut(context.Context, *request.MerchantPut) (*MerchantUpsertRes, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MerchantPut not implemented")
}
func (UnimplementedMerchantServiceServer) MerchantListGet(context.Context, *request.MerchantListGet) (*MerchantListGetRes, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MerchantListGet not implemented")
}
func (UnimplementedMerchantServiceServer) MerchantDelete(context.Context, *request.MerchantDelete) (*status.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MerchantDelete not implemented")
}
func (UnimplementedMerchantServiceServer) mustEmbedUnimplementedMerchantServiceServer() {}

// UnsafeMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServiceServer will
// result in compilation errors.
type UnsafeMerchantServiceServer interface {
	mustEmbedUnimplementedMerchantServiceServer()
}

func RegisterMerchantServiceServer(s grpc.ServiceRegistrar, srv MerchantServiceServer) {
	s.RegisterService(&MerchantService_ServiceDesc, srv)
}

func _MerchantService_MerchantPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.MerchantPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).MerchantPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.MerchantService/MerchantPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).MerchantPost(ctx, req.(*request.MerchantPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_MerchantPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.MerchantPut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).MerchantPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.MerchantService/MerchantPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).MerchantPut(ctx, req.(*request.MerchantPut))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_MerchantListGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.MerchantListGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).MerchantListGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.MerchantService/MerchantListGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).MerchantListGet(ctx, req.(*request.MerchantListGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_MerchantDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.MerchantDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).MerchantDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.MerchantService/MerchantDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).MerchantDelete(ctx, req.(*request.MerchantDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantService_ServiceDesc is the grpc.ServiceDesc for MerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MerchantPost",
			Handler:    _MerchantService_MerchantPost_Handler,
		},
		{
			MethodName: "MerchantPut",
			Handler:    _MerchantService_MerchantPut_Handler,
		},
		{
			MethodName: "MerchantListGet",
			Handler:    _MerchantService_MerchantListGet_Handler,
		},
		{
			MethodName: "MerchantDelete",
			Handler:    _MerchantService_MerchantDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/grpc/handler/merchant/merchant.proto",
}
