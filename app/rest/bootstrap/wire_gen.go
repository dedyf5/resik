// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/dedyf5/resik/app/rest/fw/echo"
	"github.com/dedyf5/resik/app/rest/handler/general"
	"github.com/dedyf5/resik/app/rest/handler/health"
	merchant2 "github.com/dedyf5/resik/app/rest/handler/merchant"
	transaction2 "github.com/dedyf5/resik/app/rest/handler/transaction"
	user2 "github.com/dedyf5/resik/app/rest/handler/user"
	"github.com/dedyf5/resik/config"
	health2 "github.com/dedyf5/resik/core/health"
	"github.com/dedyf5/resik/core/health/checkers"
	service4 "github.com/dedyf5/resik/core/health/service"
	merchant3 "github.com/dedyf5/resik/core/merchant"
	service2 "github.com/dedyf5/resik/core/merchant/service"
	transaction3 "github.com/dedyf5/resik/core/transaction"
	service3 "github.com/dedyf5/resik/core/transaction/service"
	user3 "github.com/dedyf5/resik/core/user"
	"github.com/dedyf5/resik/core/user/service"
	"github.com/dedyf5/resik/ctx/log"
	"github.com/dedyf5/resik/drivers"
	config2 "github.com/dedyf5/resik/entities/config"
	"github.com/dedyf5/resik/repositories"
	"github.com/dedyf5/resik/repositories/merchant"
	"github.com/dedyf5/resik/repositories/transaction"
	"github.com/dedyf5/resik/repositories/user"
	"github.com/dedyf5/resik/utils/validator"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeHTTP() (*App, func(), error) {
	config := _wireConfigValue
	configLog := config.Log
	logLog := log.Get(configLog)
	serverHTTP := newServerHTTP(config, logLog)
	app := config.App
	tag := app.LangDefault
	validate := validator.New(tag)
	echoEcho := echo.New(validate)
	handler := general.New(config, logLog, echoEcho)
	sqlConfig := config.Database
	sqlEngine := sqlConfig.Engine
	bool2 := _wireBoolValue
	db, cleanup, err := drivers.NewMySQLConnection(sqlConfig, bool2)
	if err != nil {
		return nil, nil, err
	}
	gormDB, cleanup2, err := drivers.NewGorm(sqlEngine, db, sqlConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepo := user.New(gormDB)
	serviceService := service.New(userRepo, config)
	userHandler := user2.New(echoEcho, logLog, serviceService)
	merchantRepo := merchant.New(gormDB)
	service5 := service2.New(merchantRepo, config)
	merchantHandler := merchant2.New(logLog, echoEcho, service5)
	transactionRepo := transaction.New(gormDB)
	service6 := service3.New(transactionRepo, config)
	transactionHandler := transaction2.New(echoEcho, logLog, service6, config)
	checker := checkers.NewDatabaseChecker(db, config)
	v := provideCheckerSlice(checker)
	iService := service4.New(v)
	healthHandler := health.New(logLog, echoEcho, iService)
	router := newRouter(config, handler, userHandler, merchantHandler, transactionHandler, healthHandler)
	bootstrapApp, cleanup3, err := newApp(serverHTTP, router)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return bootstrapApp, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireConfigValue = *configGeneral
	_wireBoolValue   = false
)

// wire.go:

var configGeneral = config.Load(config2.ModuleREST)

var configGeneralSet = wire.NewSet(wire.Value(*configGeneral), wire.FieldsOf(new(config.Config), "APP", "HTTP", "Database", "Log"), wire.FieldsOf(new(config2.App), "Env", "LangDefault"), wire.FieldsOf(new(drivers.SQLConfig), "Engine"))

var utilSet = wire.NewSet(validator.New, wire.Bind(new(validator.IValidate), new(*validator.Validate)), log.Get)

var fwSet = wire.NewSet(echo.New, wire.Bind(new(echo.IEcho), new(*echo.Echo)))

var connSet = wire.NewSet(wire.Value(false), drivers.NewMySQLConnection, drivers.NewGorm)

var gormRepoSet = wire.NewSet(user.New, merchant.New, transaction.New, wire.Bind(new(repositories.IUser), new(*user.UserRepo)), wire.Bind(new(repositories.IMerchant), new(*merchant.MerchantRepo)), wire.Bind(new(repositories.ITransaction), new(*transaction.TransactionRepo)))

var serviceSet = wire.NewSet(service.New, service2.New, service3.New, service4.New, wire.Bind(new(user3.IService), new(*service.Service)), wire.Bind(new(merchant3.IService), new(*service2.Service)), wire.Bind(new(transaction3.IService), new(*service3.Service)))

var handlerSet = wire.NewSet(general.New, user2.New, merchant2.New, transaction2.New, health.New)

func provideCheckerSlice(dbChk health2.Checker) []health2.Checker {
	return []health2.Checker{dbChk}
}

var healthCheckSet = wire.NewSet(checkers.NewDatabaseChecker, provideCheckerSlice)
