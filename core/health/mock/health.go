// Code generated by MockGen. DO NOT EDIT.
// Source: health.go
//
// Generated by this command:
//
//	mockgen -source health.go -package mock -destination ./mock/health.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	health "github.com/dedyf5/resik/core/health"
	gomock "go.uber.org/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
	isgomock struct{}
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// LivenessCheck mocks base method.
func (m *MockIService) LivenessCheck(c context.Context) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LivenessCheck", c)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// LivenessCheck indicates an expected call of LivenessCheck.
func (mr *MockIServiceMockRecorder) LivenessCheck(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LivenessCheck", reflect.TypeOf((*MockIService)(nil).LivenessCheck), c)
}

// ReadinessCheck mocks base method.
func (m *MockIService) ReadinessCheck(c context.Context) health.OverallHealthStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadinessCheck", c)
	ret0, _ := ret[0].(health.OverallHealthStatus)
	return ret0
}

// ReadinessCheck indicates an expected call of ReadinessCheck.
func (mr *MockIServiceMockRecorder) ReadinessCheck(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadinessCheck", reflect.TypeOf((*MockIService)(nil).ReadinessCheck), c)
}
