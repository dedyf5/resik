// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/dedyf5/resik/core/transaction/dto"
	param "github.com/dedyf5/resik/entities/transaction/param"
	response "github.com/dedyf5/resik/pkg/response"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// MerchantOmzetGet mocks base method.
func (m *MockIService) MerchantOmzetGet(param *param.MerchantOmzetGet) (*dto.MerchantOmzet, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantOmzetGet", param)
	ret0, _ := ret[0].(*dto.MerchantOmzet)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantOmzetGet indicates an expected call of MerchantOmzetGet.
func (mr *MockIServiceMockRecorder) MerchantOmzetGet(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantOmzetGet", reflect.TypeOf((*MockIService)(nil).MerchantOmzetGet), param)
}

// OutletOmzetGet mocks base method.
func (m *MockIService) OutletOmzetGet(param *param.OutletOmzetGet) (*dto.OutletOmzet, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutletOmzetGet", param)
	ret0, _ := ret[0].(*dto.OutletOmzet)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// OutletOmzetGet indicates an expected call of OutletOmzetGet.
func (mr *MockIServiceMockRecorder) OutletOmzetGet(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutletOmzetGet", reflect.TypeOf((*MockIService)(nil).OutletOmzetGet), param)
}
