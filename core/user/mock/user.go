// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source user.go -package mock -destination ./mock/user.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	param "github.com/dedyf5/resik/entities/user/param"
	response "github.com/dedyf5/resik/pkg/response"
	gomock "go.uber.org/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
	isgomock struct{}
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockIService) Auth(arg0 param.Auth) (string, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockIServiceMockRecorder) Auth(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockIService)(nil).Auth), arg0)
}

// AuthTokenGenerate mocks base method.
func (m *MockIService) AuthTokenGenerate(userID uint64, username string) (string, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenGenerate", userID, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// AuthTokenGenerate indicates an expected call of AuthTokenGenerate.
func (mr *MockIServiceMockRecorder) AuthTokenGenerate(userID, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenGenerate", reflect.TypeOf((*MockIService)(nil).AuthTokenGenerate), userID, username)
}
