// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	ctx "github.com/dedyf5/resik/ctx"
	merchant "github.com/dedyf5/resik/entities/merchant"
	outlet "github.com/dedyf5/resik/entities/outlet"
	transaction "github.com/dedyf5/resik/entities/transaction"
	param "github.com/dedyf5/resik/entities/transaction/param"
	user "github.com/dedyf5/resik/entities/user"
	param0 "github.com/dedyf5/resik/entities/user/param"
	response "github.com/dedyf5/resik/pkg/response"
	gomock "github.com/golang/mock/gomock"
)

// MockITransaction is a mock of ITransaction interface.
type MockITransaction struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionMockRecorder
}

// MockITransactionMockRecorder is the mock recorder for MockITransaction.
type MockITransactionMockRecorder struct {
	mock *MockITransaction
}

// NewMockITransaction creates a new mock instance.
func NewMockITransaction(ctrl *gomock.Controller) *MockITransaction {
	mock := &MockITransaction{ctrl: ctrl}
	mock.recorder = &MockITransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransaction) EXPECT() *MockITransactionMockRecorder {
	return m.recorder
}

// GetMerchantByID mocks base method.
func (m *MockITransaction) GetMerchantByID(merchantID uint64) (*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantByID", merchantID)
	ret0, _ := ret[0].(*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantByID indicates an expected call of GetMerchantByID.
func (mr *MockITransactionMockRecorder) GetMerchantByID(merchantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantByID", reflect.TypeOf((*MockITransaction)(nil).GetMerchantByID), merchantID)
}

// GetMerchantByIDAndUserID mocks base method.
func (m *MockITransaction) GetMerchantByIDAndUserID(merchantID, userID uint64) (*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantByIDAndUserID", merchantID, userID)
	ret0, _ := ret[0].(*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantByIDAndUserID indicates an expected call of GetMerchantByIDAndUserID.
func (mr *MockITransactionMockRecorder) GetMerchantByIDAndUserID(merchantID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantByIDAndUserID", reflect.TypeOf((*MockITransaction)(nil).GetMerchantByIDAndUserID), merchantID, userID)
}

// GetOutletByID mocks base method.
func (m *MockITransaction) GetOutletByID(outletID uint64) (*outlet.Outlet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutletByID", outletID)
	ret0, _ := ret[0].(*outlet.Outlet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutletByID indicates an expected call of GetOutletByID.
func (mr *MockITransactionMockRecorder) GetOutletByID(outletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutletByID", reflect.TypeOf((*MockITransaction)(nil).GetOutletByID), outletID)
}

// GetOutletByIDAndCreatedBy mocks base method.
func (m *MockITransaction) GetOutletByIDAndCreatedBy(outletID, createdBy uint64) (*outlet.Outlet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutletByIDAndCreatedBy", outletID, createdBy)
	ret0, _ := ret[0].(*outlet.Outlet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutletByIDAndCreatedBy indicates an expected call of GetOutletByIDAndCreatedBy.
func (mr *MockITransactionMockRecorder) GetOutletByIDAndCreatedBy(outletID, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutletByIDAndCreatedBy", reflect.TypeOf((*MockITransaction)(nil).GetOutletByIDAndCreatedBy), outletID, createdBy)
}

// MerchantOmzetGetData mocks base method.
func (m *MockITransaction) MerchantOmzetGetData(param *param.MerchantOmzetGet) ([]transaction.MerchantOmzet, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantOmzetGetData", param)
	ret0, _ := ret[0].([]transaction.MerchantOmzet)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantOmzetGetData indicates an expected call of MerchantOmzetGetData.
func (mr *MockITransactionMockRecorder) MerchantOmzetGetData(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantOmzetGetData", reflect.TypeOf((*MockITransaction)(nil).MerchantOmzetGetData), param)
}

// MerchantOmzetGetTotal mocks base method.
func (m *MockITransaction) MerchantOmzetGetTotal(param *param.MerchantOmzetGet) (uint64, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantOmzetGetTotal", param)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantOmzetGetTotal indicates an expected call of MerchantOmzetGetTotal.
func (mr *MockITransactionMockRecorder) MerchantOmzetGetTotal(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantOmzetGetTotal", reflect.TypeOf((*MockITransaction)(nil).MerchantOmzetGetTotal), param)
}

// OutletOmzetGetData mocks base method.
func (m *MockITransaction) OutletOmzetGetData(param *param.OutletOmzetGet) ([]transaction.OutletOmzet, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutletOmzetGetData", param)
	ret0, _ := ret[0].([]transaction.OutletOmzet)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// OutletOmzetGetData indicates an expected call of OutletOmzetGetData.
func (mr *MockITransactionMockRecorder) OutletOmzetGetData(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutletOmzetGetData", reflect.TypeOf((*MockITransaction)(nil).OutletOmzetGetData), param)
}

// OutletOmzetGetTotal mocks base method.
func (m *MockITransaction) OutletOmzetGetTotal(param *param.OutletOmzetGet) (uint64, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutletOmzetGetTotal", param)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// OutletOmzetGetTotal indicates an expected call of OutletOmzetGetTotal.
func (mr *MockITransactionMockRecorder) OutletOmzetGetTotal(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutletOmzetGetTotal", reflect.TypeOf((*MockITransaction)(nil).OutletOmzetGetTotal), param)
}

// MockIUser is a mock of IUser interface.
type MockIUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMockRecorder
}

// MockIUserMockRecorder is the mock recorder for MockIUser.
type MockIUserMockRecorder struct {
	mock *MockIUser
}

// NewMockIUser creates a new mock instance.
func NewMockIUser(ctrl *gomock.Controller) *MockIUser {
	mock := &MockIUser{ctrl: ctrl}
	mock.recorder = &MockIUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUser) EXPECT() *MockIUserMockRecorder {
	return m.recorder
}

// MerchantIDsByUserIDGetData mocks base method.
func (m *MockIUser) MerchantIDsByUserIDGetData(userID uint64) ([]uint64, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantIDsByUserIDGetData", userID)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantIDsByUserIDGetData indicates an expected call of MerchantIDsByUserIDGetData.
func (mr *MockIUserMockRecorder) MerchantIDsByUserIDGetData(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantIDsByUserIDGetData", reflect.TypeOf((*MockIUser)(nil).MerchantIDsByUserIDGetData), userID)
}

// OutletByUserIDGetData mocks base method.
func (m *MockIUser) OutletByUserIDGetData(userID uint64) ([]outlet.Outlet, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutletByUserIDGetData", userID)
	ret0, _ := ret[0].([]outlet.Outlet)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// OutletByUserIDGetData indicates an expected call of OutletByUserIDGetData.
func (mr *MockIUserMockRecorder) OutletByUserIDGetData(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutletByUserIDGetData", reflect.TypeOf((*MockIUser)(nil).OutletByUserIDGetData), userID)
}

// UserByUsernameAndPasswordGetData mocks base method.
func (m *MockIUser) UserByUsernameAndPasswordGetData(param param0.Auth) (*user.User, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByUsernameAndPasswordGetData", param)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// UserByUsernameAndPasswordGetData indicates an expected call of UserByUsernameAndPasswordGetData.
func (mr *MockIUserMockRecorder) UserByUsernameAndPasswordGetData(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByUsernameAndPasswordGetData", reflect.TypeOf((*MockIUser)(nil).UserByUsernameAndPasswordGetData), param)
}

// MockIMerchant is a mock of IMerchant interface.
type MockIMerchant struct {
	ctrl     *gomock.Controller
	recorder *MockIMerchantMockRecorder
}

// MockIMerchantMockRecorder is the mock recorder for MockIMerchant.
type MockIMerchantMockRecorder struct {
	mock *MockIMerchant
}

// NewMockIMerchant creates a new mock instance.
func NewMockIMerchant(ctrl *gomock.Controller) *MockIMerchant {
	mock := &MockIMerchant{ctrl: ctrl}
	mock.recorder = &MockIMerchantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMerchant) EXPECT() *MockIMerchantMockRecorder {
	return m.recorder
}

// MerchantInsert mocks base method.
func (m *MockIMerchant) MerchantInsert(ctx *ctx.Ctx, merchant *merchant.Merchant) (bool, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantInsert", ctx, merchant)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantInsert indicates an expected call of MerchantInsert.
func (mr *MockIMerchantMockRecorder) MerchantInsert(ctx, merchant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantInsert", reflect.TypeOf((*MockIMerchant)(nil).MerchantInsert), ctx, merchant)
}

// MerchantUpdate mocks base method.
func (m *MockIMerchant) MerchantUpdate(ctx *ctx.Ctx, merchant *merchant.Merchant) (bool, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantUpdate", ctx, merchant)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantUpdate indicates an expected call of MerchantUpdate.
func (mr *MockIMerchantMockRecorder) MerchantUpdate(ctx, merchant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantUpdate", reflect.TypeOf((*MockIMerchant)(nil).MerchantUpdate), ctx, merchant)
}
