// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	status "github.com/dedyf5/resik/ctx/status"
	merchant "github.com/dedyf5/resik/entities/merchant"
	outlet "github.com/dedyf5/resik/entities/outlet"
	transaction "github.com/dedyf5/resik/entities/transaction"
	param "github.com/dedyf5/resik/entities/transaction/param"
	user "github.com/dedyf5/resik/entities/user"
	gomock "github.com/golang/mock/gomock"
)

// MockITransaction is a mock of ITransaction interface.
type MockITransaction struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionMockRecorder
}

// MockITransactionMockRecorder is the mock recorder for MockITransaction.
type MockITransactionMockRecorder struct {
	mock *MockITransaction
}

// NewMockITransaction creates a new mock instance.
func NewMockITransaction(ctrl *gomock.Controller) *MockITransaction {
	mock := &MockITransaction{ctrl: ctrl}
	mock.recorder = &MockITransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransaction) EXPECT() *MockITransactionMockRecorder {
	return m.recorder
}

// GetMerchantByID mocks base method.
func (m *MockITransaction) GetMerchantByID(merchantID int64) (*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantByID", merchantID)
	ret0, _ := ret[0].(*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantByID indicates an expected call of GetMerchantByID.
func (mr *MockITransactionMockRecorder) GetMerchantByID(merchantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantByID", reflect.TypeOf((*MockITransaction)(nil).GetMerchantByID), merchantID)
}

// GetMerchantByIDAndUserID mocks base method.
func (m *MockITransaction) GetMerchantByIDAndUserID(merchantID, userID int64) (*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantByIDAndUserID", merchantID, userID)
	ret0, _ := ret[0].(*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantByIDAndUserID indicates an expected call of GetMerchantByIDAndUserID.
func (mr *MockITransactionMockRecorder) GetMerchantByIDAndUserID(merchantID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantByIDAndUserID", reflect.TypeOf((*MockITransaction)(nil).GetMerchantByIDAndUserID), merchantID, userID)
}

// GetOutletByID mocks base method.
func (m *MockITransaction) GetOutletByID(outletID int64) (*outlet.Outlet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutletByID", outletID)
	ret0, _ := ret[0].(*outlet.Outlet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutletByID indicates an expected call of GetOutletByID.
func (mr *MockITransactionMockRecorder) GetOutletByID(outletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutletByID", reflect.TypeOf((*MockITransaction)(nil).GetOutletByID), outletID)
}

// GetOutletByIDAndCreatedBy mocks base method.
func (m *MockITransaction) GetOutletByIDAndCreatedBy(outletID, createdBy int64) (*outlet.Outlet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutletByIDAndCreatedBy", outletID, createdBy)
	ret0, _ := ret[0].(*outlet.Outlet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutletByIDAndCreatedBy indicates an expected call of GetOutletByIDAndCreatedBy.
func (mr *MockITransactionMockRecorder) GetOutletByIDAndCreatedBy(outletID, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutletByIDAndCreatedBy", reflect.TypeOf((*MockITransaction)(nil).GetOutletByIDAndCreatedBy), outletID, createdBy)
}

// GetUserByUserNameAndPassword mocks base method.
func (m *MockITransaction) GetUserByUserNameAndPassword(userName, password string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserNameAndPassword", userName, password)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserNameAndPassword indicates an expected call of GetUserByUserNameAndPassword.
func (mr *MockITransactionMockRecorder) GetUserByUserNameAndPassword(userName, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserNameAndPassword", reflect.TypeOf((*MockITransaction)(nil).GetUserByUserNameAndPassword), userName, password)
}

// MerchantOmzetGet mocks base method.
func (m *MockITransaction) MerchantOmzetGet(param *param.MerchantOmzetGet) ([]transaction.MerchantOmzet, *status.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantOmzetGet", param)
	ret0, _ := ret[0].([]transaction.MerchantOmzet)
	ret1, _ := ret[1].(*status.Status)
	return ret0, ret1
}

// MerchantOmzetGet indicates an expected call of MerchantOmzetGet.
func (mr *MockITransactionMockRecorder) MerchantOmzetGet(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantOmzetGet", reflect.TypeOf((*MockITransaction)(nil).MerchantOmzetGet), param)
}

// OutletOmzet mocks base method.
func (m *MockITransaction) OutletOmzet(outletID int64, date time.Time) (*transaction.OutletOmzet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutletOmzet", outletID, date)
	ret0, _ := ret[0].(*transaction.OutletOmzet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutletOmzet indicates an expected call of OutletOmzet.
func (mr *MockITransactionMockRecorder) OutletOmzet(outletID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutletOmzet", reflect.TypeOf((*MockITransaction)(nil).OutletOmzet), outletID, date)
}
