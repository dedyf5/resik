// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source repository.go -package mock -destination ./mock/repository.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	ctx "github.com/dedyf5/resik/ctx"
	merchant "github.com/dedyf5/resik/entities/merchant"
	param "github.com/dedyf5/resik/entities/merchant/param"
	outlet "github.com/dedyf5/resik/entities/outlet"
	transaction "github.com/dedyf5/resik/entities/transaction"
	param0 "github.com/dedyf5/resik/entities/transaction/param"
	user "github.com/dedyf5/resik/entities/user"
	param1 "github.com/dedyf5/resik/entities/user/param"
	response "github.com/dedyf5/resik/pkg/response"
	gomock "go.uber.org/mock/gomock"
)

// MockITransaction is a mock of ITransaction interface.
type MockITransaction struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionMockRecorder
	isgomock struct{}
}

// MockITransactionMockRecorder is the mock recorder for MockITransaction.
type MockITransactionMockRecorder struct {
	mock *MockITransaction
}

// NewMockITransaction creates a new mock instance.
func NewMockITransaction(ctrl *gomock.Controller) *MockITransaction {
	mock := &MockITransaction{ctrl: ctrl}
	mock.recorder = &MockITransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransaction) EXPECT() *MockITransactionMockRecorder {
	return m.recorder
}

// GetMerchantByID mocks base method.
func (m *MockITransaction) GetMerchantByID(merchantID uint64) (*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantByID", merchantID)
	ret0, _ := ret[0].(*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantByID indicates an expected call of GetMerchantByID.
func (mr *MockITransactionMockRecorder) GetMerchantByID(merchantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantByID", reflect.TypeOf((*MockITransaction)(nil).GetMerchantByID), merchantID)
}

// GetMerchantByIDAndUserID mocks base method.
func (m *MockITransaction) GetMerchantByIDAndUserID(merchantID, userID uint64) (*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantByIDAndUserID", merchantID, userID)
	ret0, _ := ret[0].(*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantByIDAndUserID indicates an expected call of GetMerchantByIDAndUserID.
func (mr *MockITransactionMockRecorder) GetMerchantByIDAndUserID(merchantID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantByIDAndUserID", reflect.TypeOf((*MockITransaction)(nil).GetMerchantByIDAndUserID), merchantID, userID)
}

// GetOutletByID mocks base method.
func (m *MockITransaction) GetOutletByID(outletID uint64) (*outlet.Outlet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutletByID", outletID)
	ret0, _ := ret[0].(*outlet.Outlet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutletByID indicates an expected call of GetOutletByID.
func (mr *MockITransactionMockRecorder) GetOutletByID(outletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutletByID", reflect.TypeOf((*MockITransaction)(nil).GetOutletByID), outletID)
}

// GetOutletByIDAndCreatedBy mocks base method.
func (m *MockITransaction) GetOutletByIDAndCreatedBy(outletID, createdBy uint64) (*outlet.Outlet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutletByIDAndCreatedBy", outletID, createdBy)
	ret0, _ := ret[0].(*outlet.Outlet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutletByIDAndCreatedBy indicates an expected call of GetOutletByIDAndCreatedBy.
func (mr *MockITransactionMockRecorder) GetOutletByIDAndCreatedBy(outletID, createdBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutletByIDAndCreatedBy", reflect.TypeOf((*MockITransaction)(nil).GetOutletByIDAndCreatedBy), outletID, createdBy)
}

// MerchantOmzetGetData mocks base method.
func (m *MockITransaction) MerchantOmzetGetData(arg0 *param0.MerchantOmzetGet) ([]transaction.MerchantOmzet, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantOmzetGetData", arg0)
	ret0, _ := ret[0].([]transaction.MerchantOmzet)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantOmzetGetData indicates an expected call of MerchantOmzetGetData.
func (mr *MockITransactionMockRecorder) MerchantOmzetGetData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantOmzetGetData", reflect.TypeOf((*MockITransaction)(nil).MerchantOmzetGetData), arg0)
}

// MerchantOmzetGetTotal mocks base method.
func (m *MockITransaction) MerchantOmzetGetTotal(arg0 *param0.MerchantOmzetGet) (uint64, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantOmzetGetTotal", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantOmzetGetTotal indicates an expected call of MerchantOmzetGetTotal.
func (mr *MockITransactionMockRecorder) MerchantOmzetGetTotal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantOmzetGetTotal", reflect.TypeOf((*MockITransaction)(nil).MerchantOmzetGetTotal), arg0)
}

// OutletOmzetGetData mocks base method.
func (m *MockITransaction) OutletOmzetGetData(arg0 *param0.OutletOmzetGet) ([]transaction.OutletOmzet, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutletOmzetGetData", arg0)
	ret0, _ := ret[0].([]transaction.OutletOmzet)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// OutletOmzetGetData indicates an expected call of OutletOmzetGetData.
func (mr *MockITransactionMockRecorder) OutletOmzetGetData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutletOmzetGetData", reflect.TypeOf((*MockITransaction)(nil).OutletOmzetGetData), arg0)
}

// OutletOmzetGetTotal mocks base method.
func (m *MockITransaction) OutletOmzetGetTotal(arg0 *param0.OutletOmzetGet) (uint64, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutletOmzetGetTotal", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// OutletOmzetGetTotal indicates an expected call of OutletOmzetGetTotal.
func (mr *MockITransactionMockRecorder) OutletOmzetGetTotal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutletOmzetGetTotal", reflect.TypeOf((*MockITransaction)(nil).OutletOmzetGetTotal), arg0)
}

// MockIUser is a mock of IUser interface.
type MockIUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMockRecorder
	isgomock struct{}
}

// MockIUserMockRecorder is the mock recorder for MockIUser.
type MockIUserMockRecorder struct {
	mock *MockIUser
}

// NewMockIUser creates a new mock instance.
func NewMockIUser(ctrl *gomock.Controller) *MockIUser {
	mock := &MockIUser{ctrl: ctrl}
	mock.recorder = &MockIUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUser) EXPECT() *MockIUserMockRecorder {
	return m.recorder
}

// MerchantIDsByUserIDGetData mocks base method.
func (m *MockIUser) MerchantIDsByUserIDGetData(userID uint64) ([]uint64, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantIDsByUserIDGetData", userID)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantIDsByUserIDGetData indicates an expected call of MerchantIDsByUserIDGetData.
func (mr *MockIUserMockRecorder) MerchantIDsByUserIDGetData(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantIDsByUserIDGetData", reflect.TypeOf((*MockIUser)(nil).MerchantIDsByUserIDGetData), userID)
}

// OutletMerchantByUserIDGetData mocks base method.
func (m *MockIUser) OutletMerchantByUserIDGetData(userID uint64) ([]outlet.Outlet, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutletMerchantByUserIDGetData", userID)
	ret0, _ := ret[0].([]outlet.Outlet)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// OutletMerchantByUserIDGetData indicates an expected call of OutletMerchantByUserIDGetData.
func (mr *MockIUserMockRecorder) OutletMerchantByUserIDGetData(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutletMerchantByUserIDGetData", reflect.TypeOf((*MockIUser)(nil).OutletMerchantByUserIDGetData), userID)
}

// UserByUsernameAndPasswordGetData mocks base method.
func (m *MockIUser) UserByUsernameAndPasswordGetData(arg0 param1.Auth) (*user.User, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByUsernameAndPasswordGetData", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// UserByUsernameAndPasswordGetData indicates an expected call of UserByUsernameAndPasswordGetData.
func (mr *MockIUserMockRecorder) UserByUsernameAndPasswordGetData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByUsernameAndPasswordGetData", reflect.TypeOf((*MockIUser)(nil).UserByUsernameAndPasswordGetData), arg0)
}

// MockIMerchant is a mock of IMerchant interface.
type MockIMerchant struct {
	ctrl     *gomock.Controller
	recorder *MockIMerchantMockRecorder
	isgomock struct{}
}

// MockIMerchantMockRecorder is the mock recorder for MockIMerchant.
type MockIMerchantMockRecorder struct {
	mock *MockIMerchant
}

// NewMockIMerchant creates a new mock instance.
func NewMockIMerchant(ctrl *gomock.Controller) *MockIMerchant {
	mock := &MockIMerchant{ctrl: ctrl}
	mock.recorder = &MockIMerchantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMerchant) EXPECT() *MockIMerchantMockRecorder {
	return m.recorder
}

// MerchantDelete mocks base method.
func (m *MockIMerchant) MerchantDelete(c *ctx.Ctx, arg1 *merchant.Merchant) (bool, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantDelete", c, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantDelete indicates an expected call of MerchantDelete.
func (mr *MockIMerchantMockRecorder) MerchantDelete(c, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantDelete", reflect.TypeOf((*MockIMerchant)(nil).MerchantDelete), c, arg1)
}

// MerchantInsert mocks base method.
func (m *MockIMerchant) MerchantInsert(arg0 *ctx.Ctx, arg1 *merchant.Merchant) (bool, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantInsert", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantInsert indicates an expected call of MerchantInsert.
func (mr *MockIMerchantMockRecorder) MerchantInsert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantInsert", reflect.TypeOf((*MockIMerchant)(nil).MerchantInsert), arg0, arg1)
}

// MerchantListGetData mocks base method.
func (m *MockIMerchant) MerchantListGetData(arg0 *param.MerchantListGet) ([]merchant.Merchant, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantListGetData", arg0)
	ret0, _ := ret[0].([]merchant.Merchant)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantListGetData indicates an expected call of MerchantListGetData.
func (mr *MockIMerchantMockRecorder) MerchantListGetData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantListGetData", reflect.TypeOf((*MockIMerchant)(nil).MerchantListGetData), arg0)
}

// MerchantListGetTotal mocks base method.
func (m *MockIMerchant) MerchantListGetTotal(arg0 *param.MerchantListGet) (uint64, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantListGetTotal", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantListGetTotal indicates an expected call of MerchantListGetTotal.
func (mr *MockIMerchantMockRecorder) MerchantListGetTotal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantListGetTotal", reflect.TypeOf((*MockIMerchant)(nil).MerchantListGetTotal), arg0)
}

// MerchantUpdate mocks base method.
func (m *MockIMerchant) MerchantUpdate(arg0 *ctx.Ctx, arg1 *merchant.Merchant) (bool, *response.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerchantUpdate", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*response.Status)
	return ret0, ret1
}

// MerchantUpdate indicates an expected call of MerchantUpdate.
func (mr *MockIMerchantMockRecorder) MerchantUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerchantUpdate", reflect.TypeOf((*MockIMerchant)(nil).MerchantUpdate), arg0, arg1)
}
